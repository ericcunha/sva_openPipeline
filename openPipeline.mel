//###########################################
// Name: sourceModule
// Description: Finds all the mel files in a path (and potentially subpath) and sources them 
// Input: path - The path to look in (string)
// Returns: none
//###########################################
global proc sourceModule(string $path)
{ 
	string $melFiles[] = `getFileList -folder $path -filespec "*.mel"`; 
	string $eachFile; 
	print ("----- Sourcing " + $path + "------\n"); 
	print ("//////////////////////////////////////////////////////\n");
	for ($eachFile in $melFiles) 
	{ 
		string $scriptFile = ($path + $eachFile); 	
		string $cmdString = ("source \"" + $scriptFile + "\"");
		print ("//// Source: " + $cmdString + "\n"); 
		catch(`eval $cmdString`); 
	} 
}

//###########################################
// Name: sourcePyModule
// Description: Finds all the python files in a path (and potentially subpath) and sources them 
// Input: path - The path to look in (string)
// Returns: none
//###########################################
global proc sourcePyModule(string $path)
{
	python("import sys");
	python("sysPath = sys.path");
	python("appendGo = 1");
	python("for aPath in sysPath: \n if(aPath == '" + $path + "'): appendGo = 0");
	// Append if necessary the python add-on path
	python("if appendGo: \n sys.path.append('" + $path + "')\n print 'appending " + $path + "'");
	// And Here comes the MEL to Python work-around
	// Because os.path.exists returns true even when the path is invalid for importing
	// python modules (probably due to being called through MEL) for some computers
	// we take the back slash off of a given path so that
	// the directory will be recognized when importing python modules
	python("pyPath = '" + $path + "'");
	python("pyPath = pyPath[:-1]");
	python("appendGo = 1");
	python("for aPath in sysPath: \n if(aPath == pyPath): appendGo = 0");
	python("if appendGo: \n sys.path.append(pyPath)\n print 'appending %s' % pyPath");
	
	string $pyFiles[] = `getFileList -folder $path -filespec "*.py"`;
	string $eachFile;
	for ($eachFile in $pyFiles) 
	{
		print ("//// PYTHON Source: " + $path + $eachFile + "\n"); 
		// import and reload the python module
		string $pySourceNames[];
		tokenize $eachFile ".py" $pySourceNames;
		$pySourceName = $pySourceNames[0];
		python("import " + $pySourceName);
		python("reload (" + $pySourceName + ")");
		
	}
}

//###########################################
// Name: openPipelineSetMainPath
// Description: Sets the text for the project file path text field
// Input: path - The path to set the field to (string)
//				type - Not used (string)
// Returns: none
// Note: Called directly by the browse file dialog
//###########################################
global proc openPipelineSetMainPath(string $path, string $type)
{
    textField -e -tx $path mainPathTextField;    
}

//###########################################
// Name: openPipelineSetProjPathField
// Description: Sets the text for the script path text field
// Input: path - The path to set the field to (string)
//				type - Not used (string)
// Returns: none
// Note: Called directly by the browse file dialog
//###########################################
global proc openPipelineSetProjPathField(string $path, string $type)
{
    textField -e -tx $path mainProjPathTextField;    
}

//###########################################
// Name: openPipelineProjPathFieldToggle
// Description: Toggles the text field for setting the project file path between Default and Custom
// Input: none
// Returns: none
//###########################################
global proc openPipelineProjPathFieldToggle()
{
    global string $openPipeline_projectFilePath;
    int $editable = `textField -q -editable mainProjPathTextField`;
    if ($editable)
    {
        textField -e -editable 0 -tx "[Default]" mainProjPathTextField;    
        button -e -l "Edit" -w 60 op_projPathToggleButton;
        button -e -enable 0 op_projPathBrowseButton;
    }
    else
    {
        textField -e -editable 1 -tx $openPipeline_projectFilePath mainProjPathTextField;    
        button -e -l "Default" -w 60 op_projPathToggleButton;
        button -e -enable 1 op_projPathBrowseButton;
    }
}

//###########################################
// Name: openPipelineSetupExec
// Description: Sets up the Project File Path and the Script Path depending on user input
//							This method checks the user's input for validity 
//							and then edits the 'openPipeline.mel' script to reflect the changes 
//							to global variables $openPipeline_projectFilePath and $openPipeline_scriptPath
// Input: none
// Returns: none
//###########################################
global proc openPipelineSetupExec()
{
    string $newProjFilePath;
    string $newScriptPath;
    $newScriptPath = `textField -q -tx mainPathTextField`;
    if (!endsWith($newScriptPath,"/")) 
        $newScriptPath += "/"; 
    if (`textField -q -editable mainProjPathTextField`)
    {
        $newProjFilePath = `textField -q -tx mainProjPathTextField`;
    }
    else
    {
        $newProjFilePath = $newScriptPath + "openPipeline/";
    }
    string $mainFile = $newScriptPath + "openPipeline.mel";
    string $error = "";
    if (!openPipelineIsValidScriptPath($newScriptPath))
        $error += ("Script path not valid. Make sure path \"" + $newScriptPath + "\" exists and contains the \"openPipeline\" folder.\n");
    else if (!openPipelineIsValidProjFilePath($newProjFilePath))
	    $error += ("Project File path not valid. Make sure path \"" + $newProjFilePath + "\" exists.\n");
    else if (!openPipelineIsEditableFile($mainFile))
		$error += "openPipeline.mel not editable\n ";
    if (!size($error))
    {
        string $newCode[];
        int $fileId=`fopen $mainFile "r"`;
        int $i=0;
        string $nextLine= `fgetline $fileId`;
        //read code and replace global variable assignments to new values
        while ( size( $nextLine ) > 0 ) 
        { 
	        string $test1 = match("^[ 	]*global[ 	]+string[ 	]+$openPipeline_projectFilePath[ 	]*[=]{1}*",$nextLine);
	        string $test2 = match("^[ 	]*global[ 	]+string[ 	]+$openPipeline_scriptPath[ 	]*[=]{1}*",$nextLine);
	        if (size($test1))
				$newCode[$i] = "	global string $openPipeline_projectFilePath = \""+$newProjFilePath+"\";\n";
	        else if (size($test2))
				$newCode[$i] = "	global string $openPipeline_scriptPath = \""+$newScriptPath+"\";\n";
	        else
	        $newCode[$i] = $nextLine;
	        $nextLine= `fgetline $fileId`;
	        $i++;
        }
        fclose $fileId;
        $fileId=`fopen $mainFile "w"`;
        for ($line in $newCode)
        fprint $fileId $line;
        fclose $fileId;
        deleteUI openPipelineInitSetupWindow;
      
			//restart openPipeline with new values
			global string $openPipeline_scriptPath;
			$openPipeline_scriptPath = $newScriptPath;
			global string $openPipeline_projectFilePath;
			$openPipeline_projectFilePath = $newProjFilePath;
			string $scriptsFolderName = "openPipeline";
			//Check if the paths are valid
			if ((!endsWith($openPipeline_scriptPath,"/"))&&(size($openPipeline_scriptPath)))
				$openPipeline_scriptPath += "/";
			if ((!endsWith($openPipeline_projectFilePath,"/"))&&(size($openPipeline_projectFilePath)))
				$openPipeline_projectFilePath += "/";
			string $error = "";
			if (!openPipelineIsValidScriptPath($openPipeline_scriptPath))
			{   
				$error+="Script path has not yet been set or is not valid.\n";
			}
			if (!openPipelineIsValidProjFilePath($openPipeline_projectFilePath))
			{
				$error+="Project File path has not yet been set or could not be found.\n";
			}
			//If paths are valid, run the openPipeline UI
			if (!size($error))
			{
				sourceModule($openPipeline_scriptPath+$scriptsFolderName+"/"); 
				sourceModule($openPipeline_scriptPath+$scriptsFolderName+"/addons/"); 
				catch(`eval "openPipelineUI"`);
			}
			//If paths are not valid, run openPipeline setup.
			else
			{
				openPipelineSetup();
			}
	  }
     else
     {
        confirmDialog -title "openPipeline - Project Setup Error" -bgc .9 .9 .9 
        -message ("Could not complete openPipeline setup:\n"+$error)
        -button "Ok" -defaultButton "Ok";
     }
}

//###########################################
// Name: openPipelineSetup
// Description: Creates the openPipeline Setup UI
// Input: none
// Returns: none
//###########################################
global proc openPipelineSetup()
{
    global string $openPipeline_scriptPath;
    global string $openPipeline_projectFilePath;
    string $defPath = $openPipeline_scriptPath;
    string $windowExists = `window -q -exists openPipelineInitSetupWindow`;
    if ($windowExists == 1)
    {
        deleteUI openPipelineInitSetupWindow;
    }
    string $title_txt = "openPipeline Setup";
    if (`filetest -d $defPath`)
		workspace -dir $defPath;
    
    window  -w 300 -h 200 -sizeable 0 -mxb 0 -rtf 0 -title $title_txt openPipelineInitSetupWindow; 
        columnLayout -width 280 -rs 5 -co "both" 10;
            
            text -fn "boldLabelFont" -label "Script Path Setup:" -align "left" -width 280;
            text -label "Please specify the folder in which the \"openPipeline.mel\" file and the\n\"openPipeline\" folder are located." -align "left" -width 380;
            textField -h 20 -text $defPath -width 380 mainPathTextField ; 
            rowLayout -nc 2  -cw2 320 60 ;
                text -label ""; 
                //button -label "Browse..." -c "fileBrowserDialog -m 4 -fc \"openPipelineSetMainPath\" -an \"Find Location\" " -w 60; 
                button -w 60 -l "Browse..." -c "fileBrowser \"openPipelineSetMainPath\" \"OK\" \"\" 4";
            setParent..;
            separator -style "none" -height 10;
            text -fn "boldLabelFont" -label "Project File Setup:" -align "left" -width 280;
            text -label "By default, the Project File will be located in the \"openPipeline\" folder.\nYou may set a different location for the Project File here." -align "left" -width 380;
            textField -h 20 -editable 0 -text "[Default]" -width 380 mainProjPathTextField ; 
            rowLayout -nc 3  -cw3 260 60 60 ;
                text -label ""; 
                button -label "Edit" -c "openPipelineProjPathFieldToggle" -w 60 op_projPathToggleButton; 
                //button -label "Browse..." -en 0 -c "fileBrowserDialog -m 4 -fc \"openPipelineSetProjPathField\" -an \"Find Location\" " -w 60 op_projPathBrowseButton; 
                button -w 60 -en 0 -l "Browse..." -c "fileBrowser \"openPipelineSetProjPathField\" \"OK\" \"\" 4" op_projPathBrowseButton;
                setParent..;
            separator -h 10 -style "none";
            rowLayout -nc 2 -cw2 190 190;
                button -label "Accept" -w 190 -c "openPipelineSetupExec"; 
                button -label "Cancel" -w 190  -c "deleteUI openPipelineInitSetupWindow";
    if (size($openPipeline_projectFilePath))
    {
        openPipelineProjPathFieldToggle();
        textField -e -text $openPipeline_projectFilePath mainProjPathTextField;
    }
    
    window  -e -w 405 -h 350 openPipelineInitSetupWindow;
    showWindow;
} 

//###########################################
// Name: openPipelineIsValidScriptPath
// Description: Checks if the given folder is a valid script path
//							a valid script path contains the file 'openPipeline.mel'
//							and contains a folder name 'openPipeline'
// Input: folder - The path to be checked (string)
// Returns: 1 if path is a valid script path, 0 if not (int)
//###########################################
global proc  int openPipelineIsValidScriptPath(string $folder)
{
    int $valid = 1;
    if (!endsWith($folder,"/"))
        $folder += "/";
    string $fileName = $folder+"openPipeline.mel";
    string $folderName = $folder +"openPipeline";
    if (!`filetest -d $folder`)
        $valid = 0;
    else if (!`filetest -r $fileName`) 
        $valid = 0;
    else if (!`filetest -d $folderName`) 
        $valid = 0;
    return $valid;       
}

//###########################################
// Name: openPipelineIsValidProjFilePath
// Description: Checks if the given folder is a valid project path
//							The path needs to be an existing path.
// Input: folder - The path to be checked (string)
// Returns: 1 if path is valid, 0 if not (int)
//###########################################
global proc  int openPipelineIsValidProjFilePath(string $folder)
{
    int $valid = `filetest -d $folder`;
    return $valid;       
}

//###########################################
// Name: openPipelineIsEditableFile
// Description: Checks of the given file is readable and writeable
//							This is used to check if the openPipeline.mel file can be read and edited.
// Input: filename - Full path to the file to be checked (string)
// Returns: 1 if file is readable and writeable, 0 if not (int)
//###########################################
global proc int openPipelineIsEditableFile(string $filename)
{
    int $result = 1;
    if (!`filetest -w $filename`)
    {
        $result = 0;
    }
    else if (!`filetest -r $filename`)
    {
        $result = 0;
    }
    return $result;
}

//###########################################
// Name: openPipeline
// Description: Main openPipeline procedure
// Input: none
// Returns: none
//###########################################
global proc openPipeline(string $scriptPath, string $projectFilePath) 
{
	//the following two lines are edited by the script whenever the user changes the Script Path or the Project File Path
	global string $openPipeline_scriptPath;
    $openPipeline_scriptPath = $scriptPath;
	global string $openPipeline_projectFilePath;
    $openPipeline_projectFilePath = $projectFilePath;
    string $scriptsFolderName = "openPipeline";
    //Check if the paths are valid
    if ((!endsWith($openPipeline_scriptPath,"/"))&&(size($openPipeline_scriptPath)))
        $openPipeline_scriptPath += "/";
    if ((!endsWith($openPipeline_projectFilePath,"/"))&&(size($openPipeline_projectFilePath)))
        $openPipeline_projectFilePath += "/";
    string $error = "";
    if (!openPipelineIsValidScriptPath($openPipeline_scriptPath))
    {   
        $error+="Script path has yet been set or is not valid.\n";
    }
    if (!openPipelineIsValidProjFilePath($openPipeline_projectFilePath))
    {
        $error+="Project File path has not yet been set or could not be found.\n";
    }
    //If paths are valid, run the openPipeline UI
    if (!size($error))
    {
		sourceModule($openPipeline_scriptPath+$scriptsFolderName+"/"); 
		sourceModule($openPipeline_scriptPath+$scriptsFolderName+"/addons/"); 
		sourcePyModule($openPipeline_scriptPath+$scriptsFolderName+"/addons/");
		sourceModule($openPipeline_scriptPath+$scriptsFolderName+"/custom/"); 
        catch(`eval "openPipelineUI"`);
    }
    //If paths are not valid, run openPipeline setup.
    else
    {
		openPipelineSetup();
    }
} 
