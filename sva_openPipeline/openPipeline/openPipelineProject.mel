//###########################################// Name: 			openPipelineProjectUI// Description: 	creates oP Project UI// Input: 			none// Returns: 		none//###########################################global proc openPipelineProjectUI(){	global string $openPipeline_projectFilePath;	global string $openPipeline_scriptPath;	string $projList[] = openPipelineGetProjectList();	int $i=0;	if (`window -q -exists openPipelineProjUI`)		deleteUI openPipelineProjUI;	if (`window -q -exists openPipelineProjDialog`)		deleteUI openPipelineProjDialog;	string $projWindow = `window  -w 550 -h 460 -sizeable 0 -mxb 0 -rtf 0 -title ("openPipeline - Project  Manager ") openPipelineProjUI`;	columnLayout -co "left" 10 -rs 10;	    rowLayout -nc 2 -cw2 430 110;		    columnLayout -w 430;			    rowLayout -nc 2 -cw2 110 300  -ad2 1;			        text -l "Script Location:" -w 110;			        textField  -editable 0 -w 300 -tx $openPipeline_scriptPath;							        setParent..;			    rowLayout -nc 2 -cw2 110 300;			        text -l "Project File Location:" -w 110;			        textField -w 300 -editable 0 -tx $openPipeline_projectFilePath;			        setParent..;			    setParent..;			button -l "Edit Locations..." -w 90 -h 45 -c "openPipelineSetup";	        setParent..;	    rowLayout -nc 2 -cw2 170 350;	        columnLayout -rs 5;	        	button -l "Edit Users" -w 150 -c "openPipelineProjEditUsers" -ann "Add / Remove users to system" op_editUsers;	            textScrollList -h 210 -w 150 -sc "openPipelineProjectUISelection" -doubleClickCommand "openPipelineProjDialogWindow 1" op_projectList;	            rowLayout -nc 2 -cw2 75 75;    	            button -l "New..." -bgc .6 .8 .5 -c "openPipelineProjDialogWindow 0" -w 75 -ann "" op_projectNewButton;     			    button -l "Remove" -bgc .8 .3 .3 -en 0 -w 75 -c "openPipelineRemoveProjectProcess" -ann "" op_projectRemoveButton;    			    setParent..;     	        button -l "Edit.." -bgc .5 .7 .7 -en 0 -w 150 -c "openPipelineProjDialogWindow 1" -ann "" op_projectEditButton;    	        setParent..;    	    columnLayout -rs 5 -co "left" 30;    	        separator -style "none" -w 125 -h 5;    	        text -l "Project Info" -fn "plainLabelFont" -al "left";    	        scrollField -w 320 -h 250 -ww 1 -editable 0 op_projectInfoBox;    	        setParent..;    	    setParent..;    	rowLayout -nc 2 -cw2 260 260 -cl2 "center" "center";    	button -l "Refresh List" -w 260 -h 30 -c "openPipelineProjectUI";        button -l "Close" -w 260 -h 30 -c "openPipelineCloseProjUI";                for ($i = 0; $i<size($projList);$i++)        {            textScrollList -e -a $projList[$i] op_projectList;        }		string $currProjName = `optionVar -q "op_currProjectName"`;	string $currProjXml = openPipelineGetSingleProjectXml($currProjName);	int $currUserNameMode = openPipelineGetXmlData($currProjXml,"userMode");	button -e -en $currUserNameMode op_editUsers;		window -e -w 550 -h 460 openPipelineProjUI;	showWindow;}//###########################################// Name: 					openPipelineGetProjectsData// Description: 	Returns the full data of all existing projects// Input: 				none// Returns: 			A string array with each entry containing the full data of a single project in XML//###########################################global proc string[] openPipelineGetProjectsData(){	string $topLevelTag = "openPipeline_project_list";	string $projectTag = "project";	string $projectsData[];	string $projectsFile = openPipelineGetProjFile();	int $i=0;	if (`filetest -r $projectsFile`)	{		string $xml[];		string $projList[];		$xml = openPipelineGetXmlAll($projectsFile);    		$projList = openPipelineGetXmlTop($xml,$topLevelTag);		$projectsData = openPipelineGetXmlSecondary($projList, $projectTag);    		//$projectsData = openPipelineGetXmlTop($projList, $projectTag);    	}	else	{		int $fileId = `fopen $projectsFile "w"`;		if ($fileId)		fclose $fileId;		else		error("Project File does not exist, could not be opened, or could not be created.");	}	return $projectsData;}//###########################################// Name: 					openPipelineGetProjectsData// Description: 	Returns the data for a single project in XML// Input: 				$projName - the name of the project to query (string)// Returns: 			A string containing the full data of a project in XML//###########################################global proc string openPipelineGetSingleProjectXml(string $projName){	string $projData[] = openPipelineGetProjectsData();	string $returnString ="";	int $found = 0;	int $i = 0;	while ((!$found) && ($i<size($projData)))	{		string $currProjName = openPipelineGetXmlData($projData[$i],"name");		if ($currProjName == $projName)		{			$found=1;		}		$i++;	}	if ($found)	{		$i--;		$returnString = $projData[$i];	}	return $returnString;}//###########################################// Name: 					openPipelineCloseProjUI// Description: 	Closes the Project UI and related windows// Input: 				none// Returns: 			none//###########################################global proc openPipelineCloseProjUI(){	if (`window -q -exists openPipelineProjUI`)		deleteUI openPipelineProjUI;	if (`window -q -exists openPipelineProjDialog`)		deleteUI openPipelineProjDialog;	if (`window -q -exists openPipelineUsersPromptUI`)		deleteUI openPipelineUsersPromptUI;	if ( `window -exists openPipelineEditUsersUI` )		deleteUI openPipelineEditUsersUI;}//###########################################// Name: 					openPipelineProjectUISelection// Description: 	This proc is called whenever a project is selected in the Project UI. //								It queries and displays the appropriate info.// Input: 				none// Returns: 			none//###########################################global proc openPipelineProjectUISelection(){    button -e -en 1 op_projectEditButton;     button -e -en 1 op_projectRemoveButton;    int $currProjIndex[] = `textScrollList -q -sii op_projectList`;    string $data[] = openPipelineGetProjectsData();    string $name = openPipelineGetXmlData($data[$currProjIndex[0]-1], "name");    string $path = openPipelineGetXmlData($data[$currProjIndex[0]-1], "path");    string $description = openPipelineGetXmlData($data[$currProjIndex[0]-1], "description");    string $date = openPipelineGetXmlData($data[$currProjIndex[0]-1], "date");    string $deadline = openPipelineGetXmlData($data[$currProjIndex[0]-1], "deadline");    string $status = openPipelineGetXmlData($data[$currProjIndex[0]-1], "status");    string $mastername = openPipelineGetXmlData($data[$currProjIndex[0]-1], "mastername");    string $masterformat = openPipelineGetXmlData($data[$currProjIndex[0]-1], "masterformat");    string $workshopname = openPipelineGetXmlData($data[$currProjIndex[0]-1], "workshopname");    string $workshopformat = openPipelineGetXmlData($data[$currProjIndex[0]-1], "workshopformat");    string $libraryFolder = openPipelineGetXmlData($data[$currProjIndex[0]-1], "libraryfolder");    string $shotsFolder = openPipelineGetXmlData($data[$currProjIndex[0]-1], "scenesfolder");    string $archiveFolder = openPipelineGetXmlData($data[$currProjIndex[0]-1], "archivefolder");    string $deletedFolder = openPipelineGetXmlData($data[$currProjIndex[0]-1],"deletedfolder");    string $scriptsFolder = openPipelineGetXmlData($data[$currProjIndex[0]-1],"scriptsfolder");    string $rendersFolder = openPipelineGetXmlData($data[$currProjIndex[0]-1],"rendersfolder");    string $particlesFolder = openPipelineGetXmlData($data[$currProjIndex[0]-1],"particlesfolder");    string $texturesFolder = openPipelineGetXmlData($data[$currProjIndex[0]-1],"texturesfolder");    int $currUserNameMode = openPipelineGetXmlData($data[$currProjIndex[0]-1],"userMode");		string $users = openPipelineGetXmlData($data[$currProjIndex[0]-1],"users");					if ($status=="")			$status="1";		string $statusStrings[] = {"inactive","active"};		    string $projectInfo = "Project Name: " + $name +"\n" +                           "Path: " + $path +"\n" +                          "Description: " + $description +"\n" +                          "Status: " + $statusStrings[int($status)]+"\n" +                          "-------------------------------------\n" +                          "Date Created: " + $date +"\n" +                          "Deadline: " + $deadline +"\n" +                          "-------------------------------------\n"+                          "Master Files:\nname - " + $mastername + "\nformat - " +$masterformat +"\n" +                          "Workshop Files:\nname - " + $workshopname + "\nformat - " +$workshopformat + "\n" +                          "-------------------------------------\n"+                          "Library Sub-folder:    " + $libraryFolder + "\n" +                          "Shots Sub-folder:      " + $shotsFolder + "\n" +                          "Scripts Sub-folder:    " + $scriptsFolder + "\n" +                          "Renders Sub-folder:    " + $rendersFolder + "\n" +                          "Textures Sub-folder:   " + $texturesFolder + "\n" +                          "Particles Sub-folder:  " + $particlesFolder + "\n" +                          "Archive folder:        " + $archiveFolder + "\n"+                          "Deleted Items folder:  " + $deletedFolder + "\n"+                          "Users:  " + $users + "\n";                                          scrollField -e -tx $projectInfo op_projectInfoBox;    button -e -en $currUserNameMode op_editUsers;}//###########################################// Name: 					openPipelineRemoveProjectProcess// Description: 	Removes the currently selected project// Input: 				none// Returns: 			none//###########################################global proc openPipelineRemoveProjectProcess(){		string $projNameGet[] = `textScrollList -q -si op_projectList`;	string $remProjName = $projNameGet[0];	string $messageText = "Are you sure you want to remove project "+ $remProjName + " ?";	string $result = `confirmDialog -bgc .9 .9 .9 -title "Remove Project Confirm" -message $messageText			-button "Yes" -button "Cancel" -defaultButton "Yes"			-cancelButton "Cancel" -dismissString "Cancel"`;			if ($result == "Yes")	{		int $removeResult = `openPipelineRemoveProject $remProjName`;		if ($removeResult)			openPipelineUI();		else	  {			error "Project was not found.";			openPipelineProjectUI;		}	}}//###########################################// Name: 					openPipelineRewriteProjFile// Description: 	Rewrites the project xml file with the data it is passed as a string array// Input: 				A string array, with each entry containing the data of the project in an xml file// Returns: 			none//###########################################global proc openPipelineRewriteProjFile(string $projList[]){	string $projFile = openPipelineGetProjFile();	int $i=0;	if (`filetest -w $projFile`)	{		int $fileId = `fopen $projFile "w"`;		fprint $fileId "<!--This file is automatically generated by openPipeline. Edit at your own risk!-->\n";		fprint $fileId "<?xml version=\"1.0\" encoding=\"utf-8\"?>\n";		fprint $fileId "<?xml-stylesheet type=\"text/xsl\" href=\"xsl/plStylesheet.xsl\"?>\n";		fprint $fileId "<openPipeline_project_list>\n";		for ($i=0;$i<size($projList);$i++)		{			fprint $fileId "    <project>\n";			string $currData[] = stringToStringArray($projList[$i], ">");			for ($j=0;$j<size($currData);$j+=2)			{			    $currLine = "       " + $currData[$j] + ">" + $currData[$j+1] + ">\n";			    fprint $fileId $currLine;			}			fprint $fileId "    </project>\n";		}	  fprint $fileId "</openPipeline_project_list>\n";		fclose $fileId;	}	else	{ 		error("Project File " + $projFile + " could not be found, or is not writable.");				}}//###########################################// Name: 					openPipelineProjDialogWindow// Description: 	Opens the Project Dialog Window. This is used either for creating a new project or editing an existing project.// Input: 				$mode - 0 for creating a new project, 1 for editing an existing project (int)// Returns: 			none//###########################################global proc openPipelineProjDialogWindow(int $mode){	if (`window -q -exists openPipelineProjDialog`)		deleteUI openPipelineProjDialog;	string $title_txt = "Create New Project";		string $accept_str = "openPipelineProjDialogCallback("+$mode+",\"\")";	window -sizeable 0 -mxb 0 -rtf 0 openPipelineProjDialog;		columnLayout -width 280 -rs 5 -co "both" 10; 			rowLayout -nc 2 -cw2 220 120;			    text -fn "boldLabelFont" -label "Project Name (max length: 22):" -align "left" -width 220;			    textField -h 20 -width 120  op_projectNameField;			    setParent..;			separator -h 5 -st "out" -w 340;			rowLayout -nc 2 -cw2 90 250;			    text -fn "boldLabelFont" -label "Project Path:" -align "left" -width 90;			    text -label "(folders which don't already exist will be created)" -align "left" -width 250;			    setParent..;			rowLayout -nc 2 -cw2 280 60;			    textField -h 20 -width 280 op_projectPathField ;			    //button -label "Browse..." -c "fileBrowserDialog -m 4 -fc \"openPipelineSetProjDialogPath\" -an \"Find Location\" " -w 60;			    button -w 60 -l "Browse..." -c "fileBrowser \"openPipelineSetProjDialogPath\" \"OK\" \"\" 4";			    setParent..;			separator -h 5 -st "out" -w 340;		    rowLayout -nc 2 -cw2 80 260;			    text -fn "boldLabelFont" -label "Description:" -align "left" -width 80;			    textField -h 20 -width 260  op_descriptionField ;			    setParent..;			  separator -h 5 -w 340 -style "out";			rowLayout -nc 2 -cw2 100 240;			    text -fn "boldLabelFont" -label "Project Status:" -align "left" -width 100;			    optionMenu -w 160 op_projectStatus;			    	menuItem -label "inactive";            menuItem -label "active" ;			    setParent..;			    text -fn "smallPlainLabelFont" -label "(inactive projects won't appear in main openPipeline window)" -align "left" -width 340;		    separator -h 5 -st "out" -w 340;		    // begin Jarl Edit		    rowLayout -nc 2 -cw2 20 320;			checkBox -label "" -width 20 -changeCommand openPipelineProjCustomUsers op_customUsers;			text -fn "boldLabelFont" -label "Enable Custom Users" -align "left" -width 320;			setParent..;		    // end Jarl Edit		    rowLayout -nc 3 -cw3 80 260 10;			    text -fn "boldLabelFont" -label "Users:" -align "left" -width 80;			    textField -enable 0 -h 20 -width 260 op_projectUsers;			    button -l "..." -c openPipelineProjSetUsersPromptUI op_projectUsersBtn;			    setParent..;		    		    separator -h 5 -st "out" -w 340;		    rowLayout -nc 4 -cw4 100 100 70 70;		        text -fn "boldLabelFont" -label "Creation Date:" -align "left" -width 100;		        textField -h 20 -width 70 op_projectCreationDate;		        text -fn "boldLabelFont" -label "Deadline:" -align "left" -width 70;				textField -h 20 -width 70 op_projectDeadline;	            setParent..;						separator -h 5 -w 340 -style "out";			rowLayout -nc 2 -cw2 100 240;			    text -fn "boldLabelFont" -label "Master Files:" -align "left" -width 100;			    text -fn "smallPlainLabelFont" -label "(finalized versions with flattened references)" -align "left" -width 240;			    setParent..;			rowLayout -nc 4 -cw4 50 180 60 70;			    text -fn "smallPlainLabelFont" -label "Name:" -align "left" -width 50 ;			    textField -h 20 -w 130 op_projectMasterName;			    text -fn "smallPlainLabelFont" -label "File Format:" -align "left" -width 60;			    optionMenu -w 70 op_projectMasterFormat;                     menuItem -label "mb";                     menuItem -label "ma";                setParent..;            separator -h 5 -w 340 -style "out";			rowLayout -nc 2 -cw2 130 210;			    text -fn "boldLabelFont" -label "Workshop Files:" -align "left" -width 130;			    text -fn "smallPlainLabelFont" -label "(preliminary and test versions)" -align "left" -width 210;			    setParent..;			rowLayout -nc 4 -cw4 50 180 60 70;			    text -fn "smallPlainLabelFont" -label "Name:" -align "left" -width 50;			    textField -h 20 -w 130 op_projectWorkshopName;			    text -fn "smallPlainLabelFont" -label "File Format:" -align "left" -width 60;			    optionMenu -w 70 op_projectWorkshopFormat;                     menuItem -label "mb";                     menuItem -label "ma";                setParent..;	        separator -h 5 -st "out" -w 340;			text -fn "boldLabelFont" -label "Sub-Folder Names:" -align "left" -width 200;			rowLayout -nc 4 -cw4 70 120 50 100;			    text -fn "smallPlainLabelFont" -label "Asset Library:" -align "left" -width 70;			    textField -h 20  -width 100 op_projectLibraryLocation;			    text -fn "smallPlainLabelFont" -label "Scripts:" -align "left" -width 50;			    textField -h 20  -width 100 op_projectScriptsLocation;			    setParent..;		rowLayout -nc 4 -cw4 70 120 50 100;			    text -fn "smallPlainLabelFont" -label "Shot Library:" -align "left" -width 70;			    textField -h 20 -width 100 op_projectShotLocation;			    text -fn "smallPlainLabelFont" -label "Textures:" -align "left" -width 50;			    textField -h 20  -width 100 op_projectTexturesLocation;			    setParent..;		rowLayout -nc 4 -cw4 70 120 50 100;			    text -fn "smallPlainLabelFont" -label "Renders:" -align "left" -width 70;			    textField -h 20 -width 100 op_projectRendersLocation;			    text -fn "smallPlainLabelFont" -label "Particles:" -align "left" -width 50;			    textField -h 20  -width 100 op_projectParticlesLocation;			    setParent..;			text -fn "boldLabelFont" -label "Archived and Deleted Items Locations:" -align "left" -width 300;			rowLayout -nc 3 -cw3 70 220 50;			    text -fn "smallPlainLabelFont" -label "Archive:" -align "left" -width 70;			    textField -h 20 -width 220 op_projectArchiveLocation;			    //button -w 50 -l "Browse..." -c "fileBrowserDialog -m 4 -fc \"openPipelineSetArchiveDialogPath\" -an \"Find Location\" ";			    button -w 50 -l "Browse..." -c "fileBrowser \"openPipelineSetArchiveDialogPath\" \"OK\" \"\" 4";			    setParent..;			rowLayout -nc 3 -cw3 70 220 50;			    text -fn "smallPlainLabelFont" -label "Deleted Items:" -align "left" -width 70;			    textField -h 20 -width 220 op_projectDeletedLocation;			     //button -w 50 -l "Browse..." -c "fileBrowserDialog -m 4 -fc \"openPipelineSetDeletedDialogPath\" -an \"Find Location\" ";			     button -w 50 -l "Browse..." -c "fileBrowser \"openPipelineSetDeletedDialogPath\" \"OK\" \"\" 4";			    setParent..;			separator -h 5 -w 340 -style "out";			rowLayout -nc 2 -cw2 170 170;				button -label "Accept" -w 170 opProjAcceptButton;				button -label "Cancel" -w 170  -c "deleteUI openPipelineProjDialog";				setParent..;	    string $date = openPipelineGetDate();	    textField -e -text $date op_projectCreationDate;	    textField -e -text $date op_projectDeadline;	    textField -e -text "lib" op_projectLibraryLocation;	    textField -e -text "scenes" op_projectShotLocation;	    textField -e -text "archive" op_projectArchiveLocation;	    textField -e -text "deleted" op_projectDeletedLocation;	    textField -e -text "textures" op_projectTexturesLocation;	    textField -e -text "renders" op_projectRendersLocation;	    textField -e -text "particles" op_projectParticlesLocation;	    textField -e -text "scripts" op_projectScriptsLocation;	    	    textField -e -text "master" op_projectMasterName;	    textField -e -text "workshop" op_projectWorkshopName;	    optionMenu -e -sl 2 op_projectStatus;	if ($mode)	{	    string $projNameGet[] = `textScrollList -q -si op_projectList`;	    string $editProjName = $projNameGet[0];	    $title_txt = "Editing Project \""+$editProjName+"\"";	    $accept_str = "openPipelineProjDialogCallback("+$mode+",\""+$editProjName+"\")";	    string $projXml = openPipelineGetSingleProjectXml($editProjName);	    if (size($projXml))	    {	        string $curr_name = openPipelineGetXmlData($projXml,"name");	        string $curr_path = openPipelineGetXmlData($projXml,"path");	        string $curr_description = openPipelineGetXmlData($projXml,"description");	        string $curr_status = openPipelineGetXmlData($projXml,"status");	        string $curr_date = openPipelineGetXmlData($projXml,"date");	        string $curr_deadline = openPipelineGetXmlData($projXml,"deadline");	        string $curr_mastername = openPipelineGetXmlData($projXml,"mastername");	        string $curr_masterformat = openPipelineGetXmlData($projXml,"masterformat");	        string $curr_workshopname = openPipelineGetXmlData($projXml,"workshopname");	        string $curr_workshopformat = openPipelineGetXmlData($projXml,"workshopformat");	        string $curr_libraryFolder = openPipelineGetXmlData($projXml,"libraryfolder");	        string $curr_shotsFolder = openPipelineGetXmlData($projXml,"scenesfolder");					string $curr_archiveFolder = openPipelineGetXmlData($projXml,"archivefolder");					string $curr_deletedFolder = openPipelineGetXmlData($projXml,"deletedfolder");					string $curr_scriptsFolder = openPipelineGetXmlData($projXml,"scriptsfolder");					string $curr_rendersFolder = openPipelineGetXmlData($projXml,"rendersfolder");					string $curr_particlesFolder = openPipelineGetXmlData($projXml,"particlesfolder");					string $curr_texturesFolder = openPipelineGetXmlData($projXml,"texturesfolder");  	        string $curr_users = openPipelineGetXmlData($projXml,"users");	        int $curr_userMode = openPipelineGetXmlData($projXml,"userMode");		 	  checkBox -e -v $curr_userMode op_customUsers;	  button -e -enable $curr_userMode op_projectUsersBtn;                       textField -e -text $curr_name op_projectNameField;          textField -e -text $curr_path op_projectPathField;          textField -e -text $curr_description op_descriptionField;          textField -e -text $curr_date op_projectCreationDate;	        textField -e -text $curr_deadline op_projectDeadline;      	        textField -e -ed 0 -text $curr_libraryFolder op_projectLibraryLocation;	        textField -e -ed 0 -text $curr_shotsFolder op_projectShotLocation;	        if (size($curr_archiveFolder))	        	textField -e -ed 1 -text $curr_archiveFolder op_projectArchiveLocation;   	        if (size($curr_deletedFolder))	        	textField -e -ed 1 -text $curr_deletedFolder op_projectDeletedLocation;	        if (size($curr_rendersFolder))	        	textField -e -ed 1 -text $curr_rendersFolder op_projectRendersLocation;	        if (size($curr_particlesFolder))	        	textField -e -ed 1 -text $curr_particlesFolder op_projectParticlesLocation;	        if (size($curr_texturesFolder))	        	textField -e -ed 1 -text $curr_texturesFolder op_projectTexturesLocation;	        if (size($curr_scriptsFolder))	       	 textField -e -ed 1 -text $curr_scriptsFolder op_projectScriptsLocation;		if (size($curr_users))
			{
			
			// create a user list that is based on a comparison of the
			// global user list to the project user list
			
			// get the global user list
			string $globalUsers[] = `openPipelineGetUsers`;
			$curr_usersArray = stringToStringArray($curr_users, ",");
			
			string $returnList[] = openPipelineCompareFirstToSecondList($curr_usersArray, $globalUsers);
			
			/*
			$questionableList = $curr_usersArray;
			$comparisonList = $globalUsers;
			
			string $returnList[];
			int $i = 0;
			
			for ($qItem in $questionableList) {
			
				int $testItem = 0;
				for ($cItem in $comparisonList)
				{
					if ($qItem == $cItem)
					{
						$testItem = 1;
					}
				}
				if ($testItem)
				{
					$returnList[$i] = $qItem;
					$i++;
				}
			}
			*/
			
			string $userString = `stringArrayToString $returnList ","`;
			textField -e -ed 1 -text $userString op_projectUsers;			//textField -e -ed 1 -text $curr_users op_projectUsers;		}
		
			        textField -e -ed 0 -text $curr_mastername op_projectMasterName;	        optionMenu -e -en 0 -v $curr_masterformat op_projectMasterFormat;	        textField -e -ed 0 -text $curr_workshopname op_projectWorkshopName;	        optionMenu -e -en 0 -v $curr_workshopformat op_projectWorkshopFormat;  	        if ($curr_status=="")	        	$curr_status="1";	        optionMenu -e -sl (int($curr_status)+1) op_projectStatus;   	        workspace -dir $curr_path;	    }	}	else	{		//string $allUsers = stringArrayToString(`openPipelineGetUsers`, ",");		//textField -e -ed 1 -text $allUsers op_projectUsers;		//openPipelineProjCustomUsers();		checkBox -e -v 0 op_customUsers;		button -e -enable 0 op_projectUsersBtn;	}	button -e -c $accept_str opProjAcceptButton;	if ( `about -os` == "nt" )		window  -e -w 377 -h 717 -title $title_txt openPipelineProjDialog;	else		window  -e -w 383 -h 837 -title $title_txt openPipelineProjDialog;	showWindow;}//###########################################// Name: 					openPipelineProjDialogCallback// Description: 	Performs the actions specified by the project dialog box// Input: 				$mode - 0 for creating a new project, 1 for editing an existing project (int)//								$editProjName - the new project name (if in edit mode) (string)// Returns: 			none//###########################################global proc openPipelineProjDialogCallback(int $mode, string $oldName){		string $newName = strip(`textField -q -tx op_projectNameField`);	string $newPath = strip(`textField -q -tx op_projectPathField`);		string $newDescription = strip(`textField -q -tx op_descriptionField`);	string $userMode = strip(`checkBox -q -v op_customUsers`);	//int $userMode = `checkBox -q -v op_customUsers`;	string $newUsers = strip(`textField -q -tx op_projectUsers`);	string $newDate = strip(`textField -q -tx op_projectCreationDate`);	string $newDeadline = strip(`textField -q -tx op_projectDeadline`);	int $newStatus = `optionMenu -q -sl op_projectStatus`;	$newStatus--; //convert from 1-based to 0-based	string $newMasterName = strip(`textField -q -tx op_projectMasterName`);	string $newMasterFormat = strip(`optionMenu -q -v op_projectMasterFormat`);	string $newWorkshopName = strip(`textField -q -tx op_projectWorkshopName`);	string $newWorkshopFormat = strip(`optionMenu -q -v op_projectWorkshopFormat`);	string $newLibraryLocation = strip(`textField -q -tx op_projectLibraryLocation`);	string $newShotLocation = strip(`textField -q -tx op_projectShotLocation`);	string $newArchiveLocation = strip(`textField -q -tx op_projectArchiveLocation`);	string $newDeletedLocation = strip(`textField -q -tx op_projectDeletedLocation`);	string $newScriptsLocation = strip(`textField -q -tx op_projectScriptsLocation`);	string $newRendersLocation = strip(`textField -q -tx op_projectRendersLocation`);	string $newParticlesLocation = strip(`textField -q -tx op_projectParticlesLocation`);	string $newTexturesLocation = strip(`textField -q -tx op_projectTexturesLocation`);	int $result = openPipelineCreateOrEditProject($mode, $oldName, $newName, $newPath, $newDescription, 					$newStatus, $newDate, $newDeadline, $newMasterName, $newMasterFormat, $newWorkshopName, 					$newWorkshopFormat, $newLibraryLocation, $newShotLocation, $newRendersLocation, $newScriptsLocation, 					$newTexturesLocation, $newParticlesLocation, $newArchiveLocation, $newDeletedLocation, $newUsers, $userMode);	if ($result) {		openPipelineUI;	}}//###########################################// Name: 					openPipelineSetProjDialogPath// Description: 	This proc is called by the file browser dialog.  It sets the appropriate text field to the path the user has chosen.// Input: 				$path - the path chosen by the user (string)//								$type - not used (string)// Returns: 			none//###########################################global proc openPipelineSetProjDialogPath(string $path, string $type){	string $projName = `textField -q -tx op_projectNameField`;	string $completePath = $path+"/"+$projName;	textField -e -tx $completePath op_projectPathField;	}//###########################################// Name: 					openPipelineSetArchiveLocationDialogPath// Description: 	This proc is called by the file browser dialog.  It sets the appropriate text field to the path the user has chosen.// Input: 				$path - the path chosen by the user (string)//								$type - not used (string)// Returns: 			none//###########################################global proc openPipelineSetArchiveDialogPath(string $path, string $type){	textField -e -tx $path op_projectArchiveLocation;}//###########################################// Name: 					openPipelineSetDeletedLocationDialogPath// Description: 	This proc is called by the file browser dialog.  It sets the appropriate text field to the path the user has chosen.// Input: 				$path - the path chosen by the user (string)//								$type - not used (string)// Returns: 			none//###########################################global proc openPipelineSetDeletedDialogPath(string $path, string $type){	textField -e -tx $path op_projectDeletedLocation;}//###########################################// Name: 					openPipelineGetProjFile// Description: 	Returns the full path of the Project File// Input: 				none// Returns: 			$The full path of the Project File (string)//###########################################global proc string openPipelineGetProjFile(){	global string $openPipeline_projectFilePath;	global string $openPipeline_projList;	return $openPipeline_projectFilePath+$openPipeline_projList;}//###########################################// Name: 					openPipelineProjCustomUsers// Description: 	Enables/Disables Custom UserNames// Input: 				none// Returns: 				none//###########################################global proc openPipelineProjCustomUsers(){	global string $openPipeline_userName;	string $currentState = `checkBox -q -v op_customUsers`;	string $projNameGet[] = `textScrollList -q -si op_projectList`;	string $editProjName = $projNameGet[0];	string $projXml = openPipelineGetSingleProjectXml($editProjName);	string $curr_users = openPipelineGetXmlData($projXml,"users");		if (size($curr_users))		textField -e -ed 1 -text $curr_users op_projectUsers;	if ( $currentState == 1 ) {		button -e -enable 1 op_projectUsersBtn;	} else {		$openPipeline_userName = `getenv USER`;		button -e -enable 0 op_projectUsersBtn;	}}global proc openPipelineProjSetUsersPromptUI(){	$columnWidth = 300;	$columnHeight = 200;	$title_txt = "Set Project Users";	if (`window -q -exists openPipelineUsersPromptUI`)		deleteUI openPipelineUsersPromptUI;	window openPipelineUsersPromptUI;		string $form = `formLayout -numberOfDivisions 100`;		string $label = `text -l "Select users to add to project."`;	string $list = `textScrollList -allowMultiSelection true openPipelineProjSetUsersPromptUserList`;	string $users[] = `openPipelineGetUsers`;	for ($user in $users)		textScrollList -e -append $user openPipelineProjSetUsersPromptUserList;	string $setBtn = `button -w 100 -l "Set Users" -c "openPipelineProjSetUsersPromptSet"`;	string $editUsersBtn = `button -w 100 -l "Edit Users" -c "openPipelineProjEditUsers"`;	string $cancelBtn = `button -w 100 -l "Cancel" -c "deleteUI openPipelineUsersPromptUI"`;	formLayout -e			-af $label "top" 0		-af $label "left" 0		-af $label "right" 0				-ac $list "top" 0 $label		-af $list "left" 0		-af $list "right" 0		-ac $list "bottom" 0 $setBtn				-af $setBtn "left" 0		-af $setBtn "bottom" 0		-ap $setBtn "right" 0 33				-ap $editUsersBtn "left" 0 33		-af $editUsersBtn "bottom" 0		-ap $editUsersBtn "right" 0 66			-ap $cancelBtn "left" 0 66		-af $cancelBtn "right" 0		-af $cancelBtn "bottom" 0				$form;	window -e -w 300 -h 240 -title $title_txt openPipelineUsersPromptUI;	showWindow;}// Return dismiss result to include selected usersglobal proc openPipelineProjSetUsersPromptSet()
{
	string $users[] = `textScrollList -q -si openPipelineProjSetUsersPromptUserList`;	string $userString = `stringArrayToString $users ","`;	textField -e -tx $userString op_projectUsers;	deleteUI openPipelineUsersPromptUI;
}